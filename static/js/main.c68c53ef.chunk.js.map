{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["App","useState","newTask","setNewTask","tasksList","setTasksList","taskInput","useRef","addTask","name","newTasks","done","className","onSubmit","e","preventDefault","current","focus","type","onChange","target","value","autoFocus","ref","map","t","i","key","style","textDecoration","onClick","toggleDoneTask","splice","removeTask","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iPA8FeA,MAtFf,WAA6B,IAAD,EACMC,mBAAiB,IADvB,mBACjBC,EADiB,KACRC,EADQ,OAEUF,mBAAkB,IAF5B,mBAEjBG,EAFiB,KAENC,EAFM,KAGlBC,EAAYC,iBAAyB,MASrCC,EAAU,SAACC,GACb,IAAMC,EAAiB,sBAAON,GAAP,CAAkB,CAAEK,KAAMA,EAAME,MAAM,KAC7DN,EAAaK,IAejB,OACI,yBAAKE,UAAU,iBACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,wBACX,2GAIA,yBAAKA,UAAU,QACX,yBAAKA,UAAU,aACX,0BAAMC,SAlCT,SAACC,GAAoB,IAAD,EACrCA,EAAEC,iBACFP,EAAQN,GACRC,EAAW,IACX,UAAAG,EAAUU,eAAV,SAAmBC,UA+BK,2BACIC,KAAK,OACLC,SAAU,SAACL,GAAD,OAAOX,EAAWW,EAAEM,OAAOC,QACrCA,MAAOnB,EACPU,UAAU,eACVU,WAAS,EACTC,IACIjB,IAGR,4BAAQM,UAAU,+BAAlB,WAMXR,EAAUoB,KAAI,SAACC,EAAUC,GAAX,OACX,yBAAKC,IAAKD,EAAGd,UAAU,uBACnB,wBACIgB,MAAO,CACHC,eAAgBJ,EAAEd,KACZ,eACA,KAETc,EAAEhB,MAEP,6BACI,4BACIG,UAAU,oBACVkB,QAAS,kBApDlB,SAACJ,GACpB,IAAMhB,EAAiB,YAAON,GAC9BM,EAASgB,GAAGf,MAAQD,EAASgB,GAAGf,KAChCN,EAAaK,GAiD8BqB,CAAeL,KAC7BD,EAAEd,KAAO,SAAM,UAEpB,4BACIC,UAAU,iBACVkB,QAAS,kBAnDtB,SAACJ,GAChB,IAAMhB,EAAiB,YAAON,GAC9BM,EAASsB,OAAON,EAAG,GACnBrB,EAAaK,GAgD8BuB,CAAWP,KAF9B,yBCpEZQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,SD+HtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.c68c53ef.chunk.js","sourcesContent":["import React, { useState, useRef } from 'react';\n\ntype FormElement = React.FormEvent<HTMLFormElement>;\ninterface ITask {\n    name: string;\n    done: boolean;\n}\n\nfunction App(): JSX.Element {\n    const [newTask, setNewTask] = useState<string>('');\n    const [tasksList, setTasksList] = useState<ITask[]>([]);\n    const taskInput = useRef<HTMLInputElement>(null);\n\n    const handleSubmit = (e: FormElement) => {\n        e.preventDefault();\n        addTask(newTask);\n        setNewTask('');\n        taskInput.current?.focus();\n    };\n\n    const addTask = (name: string): void => {\n        const newTasks: ITask[] = [...tasksList, { name: name, done: false }];\n        setTasksList(newTasks);\n    };\n\n    const toggleDoneTask = (i: number): void => {\n        const newTasks: ITask[] = [...tasksList];\n        newTasks[i].done = !newTasks[i].done;\n        setTasksList(newTasks);\n    };\n\n    const removeTask = (i: number) => {\n        const newTasks: ITask[] = [...tasksList];\n        newTasks.splice(i, 1);\n        setTasksList(newTasks);\n    };\n\n    return (\n        <div className='container p-4'>\n            <div className='row'>\n                <div className='col-md-6 offset-md-3'>\n                    <h1>\n                        React and Typescript TasksApp stylized with Bootswatch,\n                        by Ignacio Ceaglio.\n                    </h1>\n                    <div className='card'>\n                        <div className='card-body'>\n                            <form onSubmit={handleSubmit}>\n                                <input\n                                    type='text'\n                                    onChange={(e) => setNewTask(e.target.value)}\n                                    value={newTask}\n                                    className='form-control'\n                                    autoFocus /**+-Para que al cargar la P√°gina Autom√°ticamente se Ponga el Cursor en el Input.*/\n                                    ref={\n                                        taskInput\n                                    } /**+-Para que al haber Creado una Tarea Autom√°ticamente se Ponga el Cursor en el Input de nuevo.*/\n                                />\n                                <button className='btn btn-dark btn-block mt-2'>\n                                    Save\n                                </button>\n                            </form>\n                        </div>\n                    </div>\n                    {tasksList.map((t: ITask, i: number) => (\n                        <div key={i} className='card card-body mt-2'>\n                            <h2\n                                style={{\n                                    textDecoration: t.done\n                                        ? 'line-through'\n                                        : '',\n                                }}>\n                                {t.name}\n                            </h2>\n                            <div>\n                                <button\n                                    className='btn btn-secondary'\n                                    onClick={() => toggleDoneTask(i)}>\n                                    {t.done ? '‚úÖ' : '‚ùå'}\n                                </button>\n                                <button\n                                    className='btn btn-danger'\n                                    onClick={() => removeTask(i)}>\n                                    üóë\n                                </button>\n                            </div>\n                        </div>\n                    ))}\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootswatch/dist/lux/bootstrap.min.css';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}